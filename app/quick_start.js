/**
 * Created by liujin on 2016/10/9.
 */
// Number
// JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型
var num = 123;
num = 0.123;
num = 1.2345;
num = -99;
num = NaN
num = Infinity;

// 字符串， 单引号'或双引号"括起来的任意文本

// 布尔值，true或false

// &&

// ||

// !非运算

// 比较运算符
// ==比较，自动转换数据类型再比较，很多时候，会得到非常诡异的结果
// ===比较，不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较
// 因此要始终坚持使用===比较
// NaN这个特殊的Number与所有其他值都不相等，包括它自己，唯一能判断NaN的方法是通过isNaN()函数
// 比较两个浮点数的大小，只能计算他们差值的绝对值是否小于某个阈值

// null和undefined
/*
 *
 * null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。
 * undefined表示“未定义”
 * 大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。
 *
 */

// 数组,可以包括任意数据类型
var arr = [1, 2, 3, 'hello', null, true];
arr[0];
arr[1];
arr[5];

// 对象,键都是字符串类型，值可以是任意数据类型。
var obj = {
    name:'hello',
    age:25,
    city:'beijing',
    hasCar:false
};
obj.name;
obj.age;

// strict模式
// JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：
i = 10; // i现在是全局变量
// 在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。
// 使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内，同名变量在不同的函数体内互不冲突。

